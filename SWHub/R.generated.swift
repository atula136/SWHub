//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct keychainAccessGroups {
      static let appIdentifierPrefixComTosperySwhub = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)com.tospery.swhub") ?? "$(AppIdentifierPrefix)com.tospery.swhub"
      static let appIdentifierPrefixShared = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)shared") ?? "$(AppIdentifierPrefix)shared"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 20 files.
  struct file {
    /// Resource file `Condition.json`.
    static let conditionJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Condition", pathExtension: "json")
    /// Resource file `Misc.json`.
    static let miscJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Misc", pathExtension: "json")
    /// Resource file `default-v0.realm`.
    static let defaultV0Realm = Rswift.FileResource(bundle: R.hostingBundle, name: "default-v0", pathExtension: "realm")
    /// Resource file `developers.json`.
    static let developersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "developers", pathExtension: "json")
    /// Resource file `empty.json`.
    static let emptyJson = Rswift.FileResource(bundle: R.hostingBundle, name: "empty", pathExtension: "json")
    /// Resource file `languages.json`.
    static let languagesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "languages", pathExtension: "json")
    /// Resource file `login.json`.
    static let loginJson = Rswift.FileResource(bundle: R.hostingBundle, name: "login", pathExtension: "json")
    /// Resource file `readme.txt`.
    static let readmeTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "readme", pathExtension: "txt")
    /// Resource file `repos-rxhanson-Rectangle-branches.1.json`.
    static let reposRxhansonRectangleBranches1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "repos-rxhanson-Rectangle-branches.1", pathExtension: "json")
    /// Resource file `repos-rxhanson-Rectangle-forks.1.json`.
    static let reposRxhansonRectangleForks1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "repos-rxhanson-Rectangle-forks.1", pathExtension: "json")
    /// Resource file `repos-rxhanson-Rectangle-issues.open1.json`.
    static let reposRxhansonRectangleIssuesOpen1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "repos-rxhanson-Rectangle-issues.open1", pathExtension: "json")
    /// Resource file `repos-rxhanson-Rectangle-readme.json`.
    static let reposRxhansonRectangleReadmeJson = Rswift.FileResource(bundle: R.hostingBundle, name: "repos-rxhanson-Rectangle-readme", pathExtension: "json")
    /// Resource file `repos-rxhanson-Rectangle-stargazers.1.json`.
    static let reposRxhansonRectangleStargazers1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "repos-rxhanson-Rectangle-stargazers.1", pathExtension: "json")
    /// Resource file `repos-rxhanson-Rectangle-subscribers.1.json`.
    static let reposRxhansonRectangleSubscribers1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "repos-rxhanson-Rectangle-subscribers.1", pathExtension: "json")
    /// Resource file `repos-rxhanson-Rectangle.json`.
    static let reposRxhansonRectangleJson = Rswift.FileResource(bundle: R.hostingBundle, name: "repos-rxhanson-Rectangle", pathExtension: "json")
    /// Resource file `repos-tospery-SWHub.json`.
    static let reposTosperySWHubJson = Rswift.FileResource(bundle: R.hostingBundle, name: "repos-tospery-SWHub", pathExtension: "json")
    /// Resource file `repositories.json`.
    static let repositoriesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "repositories", pathExtension: "json")
    /// Resource file `user-starred-rxhanson-Rectangle.json`.
    static let userStarredRxhansonRectangleJson = Rswift.FileResource(bundle: R.hostingBundle, name: "user-starred-rxhanson-Rectangle", pathExtension: "json")
    /// Resource file `user2.json`.
    static let user2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "user2", pathExtension: "json")
    /// Resource file `users-KalleHallden.json`.
    static let usersKalleHalldenJson = Rswift.FileResource(bundle: R.hostingBundle, name: "users-KalleHallden", pathExtension: "json")

    /// `bundle.url(forResource: "Condition", withExtension: "json")`
    static func conditionJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.conditionJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Misc", withExtension: "json")`
    static func miscJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.miscJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "default-v0", withExtension: "realm")`
    static func defaultV0Realm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defaultV0Realm
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "developers", withExtension: "json")`
    static func developersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.developersJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "empty", withExtension: "json")`
    static func emptyJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emptyJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "languages", withExtension: "json")`
    static func languagesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.languagesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "login", withExtension: "json")`
    static func loginJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loginJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "readme", withExtension: "txt")`
    static func readmeTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repos-rxhanson-Rectangle", withExtension: "json")`
    static func reposRxhansonRectangleJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposRxhansonRectangleJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repos-rxhanson-Rectangle-branches.1", withExtension: "json")`
    static func reposRxhansonRectangleBranches1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposRxhansonRectangleBranches1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repos-rxhanson-Rectangle-forks.1", withExtension: "json")`
    static func reposRxhansonRectangleForks1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposRxhansonRectangleForks1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repos-rxhanson-Rectangle-issues.open1", withExtension: "json")`
    static func reposRxhansonRectangleIssuesOpen1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposRxhansonRectangleIssuesOpen1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repos-rxhanson-Rectangle-readme", withExtension: "json")`
    static func reposRxhansonRectangleReadmeJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposRxhansonRectangleReadmeJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repos-rxhanson-Rectangle-stargazers.1", withExtension: "json")`
    static func reposRxhansonRectangleStargazers1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposRxhansonRectangleStargazers1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repos-rxhanson-Rectangle-subscribers.1", withExtension: "json")`
    static func reposRxhansonRectangleSubscribers1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposRxhansonRectangleSubscribers1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repos-tospery-SWHub", withExtension: "json")`
    static func reposTosperySWHubJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposTosperySWHubJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repositories", withExtension: "json")`
    static func repositoriesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.repositoriesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "user-starred-rxhanson-Rectangle", withExtension: "json")`
    static func userStarredRxhansonRectangleJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userStarredRxhansonRectangleJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "user2", withExtension: "json")`
    static func user2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.user2Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "users-KalleHallden", withExtension: "json")`
    static func usersKalleHalldenJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.usersKalleHalldenJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `AppLaunch`.
    static let appLaunch = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLaunch")
    /// Image `xdetail_btn_starred`.
    static let xdetail_btn_starred = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_btn_starred")
    /// Image `xdetail_btn_unstarred`.
    static let xdetail_btn_unstarred = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_btn_unstarred")
    /// Image `xdetail_cell_branch`.
    static let xdetail_cell_branch = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_branch")
    /// Image `xdetail_cell_code`.
    static let xdetail_cell_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_code")
    /// Image `xdetail_cell_commit`.
    static let xdetail_cell_commit = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_commit")
    /// Image `xdetail_cell_contributor`.
    static let xdetail_cell_contributor = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_contributor")
    /// Image `xdetail_cell_event`.
    static let xdetail_cell_event = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_event")
    /// Image `xdetail_cell_line`.
    static let xdetail_cell_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_line")
    /// Image `xdetail_cell_notification`.
    static let xdetail_cell_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_notification")
    /// Image `xdetail_cell_pull`.
    static let xdetail_cell_pull = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_pull")
    /// Image `xdetail_cell_release`.
    static let xdetail_cell_release = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_release")
    /// Image `xdetail_cell_star`.
    static let xdetail_cell_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "xdetail_cell_star")
    /// Image `xnav_condition`.
    static let xnav_condition = Rswift.ImageResource(bundle: R.hostingBundle, name: "xnav_condition")
    /// Image `xnav_github`.
    static let xnav_github = Rswift.ImageResource(bundle: R.hostingBundle, name: "xnav_github")
    /// Image `xsetting_badge_collaborator`.
    static let xsetting_badge_collaborator = Rswift.ImageResource(bundle: R.hostingBundle, name: "xsetting_badge_collaborator")
    /// Image `xsetting_badge_repository`.
    static let xsetting_badge_repository = Rswift.ImageResource(bundle: R.hostingBundle, name: "xsetting_badge_repository")
    /// Image `xsetting_badge_star`.
    static let xsetting_badge_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "xsetting_badge_star")
    /// Image `xsetting_badge_user`.
    static let xsetting_badge_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "xsetting_badge_user")
    /// Image `xsetting_cell_logout`.
    static let xsetting_cell_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "xsetting_cell_logout")
    /// Image `xsetting_cell_night`.
    static let xsetting_cell_night = Rswift.ImageResource(bundle: R.hostingBundle, name: "xsetting_cell_night")
    /// Image `xsetting_cell_theme`.
    static let xsetting_cell_theme = Rswift.ImageResource(bundle: R.hostingBundle, name: "xsetting_cell_theme")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLaunch", bundle: ..., traitCollection: ...)`
    static func appLaunch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLaunch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_btn_starred", bundle: ..., traitCollection: ...)`
    static func xdetail_btn_starred(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_btn_starred, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_btn_unstarred", bundle: ..., traitCollection: ...)`
    static func xdetail_btn_unstarred(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_btn_unstarred, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_branch", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_branch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_branch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_code", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_code, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_commit", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_commit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_commit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_contributor", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_contributor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_contributor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_event", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_event(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_event, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_line", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_notification", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_pull", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_pull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_pull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_release", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_release(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_release, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xdetail_cell_star", bundle: ..., traitCollection: ...)`
    static func xdetail_cell_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xdetail_cell_star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xnav_condition", bundle: ..., traitCollection: ...)`
    static func xnav_condition(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xnav_condition, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xnav_github", bundle: ..., traitCollection: ...)`
    static func xnav_github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xnav_github, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xsetting_badge_collaborator", bundle: ..., traitCollection: ...)`
    static func xsetting_badge_collaborator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xsetting_badge_collaborator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xsetting_badge_repository", bundle: ..., traitCollection: ...)`
    static func xsetting_badge_repository(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xsetting_badge_repository, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xsetting_badge_star", bundle: ..., traitCollection: ...)`
    static func xsetting_badge_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xsetting_badge_star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xsetting_badge_user", bundle: ..., traitCollection: ...)`
    static func xsetting_badge_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xsetting_badge_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xsetting_cell_logout", bundle: ..., traitCollection: ...)`
    static func xsetting_cell_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xsetting_cell_logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xsetting_cell_night", bundle: ..., traitCollection: ...)`
    static func xsetting_cell_night(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xsetting_cell_night, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xsetting_cell_theme", bundle: ..., traitCollection: ...)`
    static func xsetting_cell_theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xsetting_cell_theme, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 62 localization keys.
    struct localizable {
      /// Value: %@增加了%d个星
      static let trendingRepoStarsNew = Rswift.StringResource(key: "Trending.Repo.Stars.New", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Blog
      static let blog = Rswift.StringResource(key: "Blog", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Branches
      static let branches = Rswift.StringResource(key: "Branches", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Company
      static let company = Rswift.StringResource(key: "Company", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Developers
      static let developers = Rswift.StringResource(key: "Developers", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Followers
      static let followers = Rswift.StringResource(key: "Followers", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Following
      static let following = Rswift.StringResource(key: "Following", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forks
      static let forks = Rswift.StringResource(key: "Forks", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Issues
      static let issues = Rswift.StringResource(key: "Issues", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Location
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pull requests
      static let pullRequests = Rswift.StringResource(key: "Pull requests", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Readme
      static let readme = Rswift.StringResource(key: "Readme", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Repositories
      static let repositories = Rswift.StringResource(key: "Repositories", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stars
      static let stars = Rswift.StringResource(key: "Stars", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Updated %@ ago
      static let repoUpdateDatetime = Rswift.StringResource(key: "Repo.Update.Datetime", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User
      static let user = Rswift.StringResource(key: "User", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Watchs
      static let watchs = Rswift.StringResource(key: "Watchs", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 下拉刷新
      static let pullToRefresh = Rswift.StringResource(key: "Pull to refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 事件
      static let detailCellEvent = Rswift.StringResource(key: "Detail.Cell.Event", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 今日
      static let daily = Rswift.StringResource(key: "Daily", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 保存
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加载中
      static let loading = Rswift.StringResource(key: "Loading...", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 取消
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 否
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 夜间模式
      static let settingPreferencesNight = Rswift.StringResource(key: "Setting.Preferences.Night", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 密码
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 已发布
      static let detailCellRelease = Rswift.StringResource(key: "Detail.Cell.Release", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 您确定要退出%@吗
      static let userExitPrompt = Rswift.StringResource(key: "User.Exit.Prompt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 我的通知
      static let detailCellNotification = Rswift.StringResource(key: "Detail.Cell.Notification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 我的项目
      static let settingProject = Rswift.StringResource(key: "Setting.Project", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 所有分支
      static let detailCellBranch = Rswift.StringResource(key: "Detail.Cell.Branch", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 所有语言
      static let allLanguages = Rswift.StringResource(key: "All languages", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 打星历史
      static let detailCellStar = Rswift.StringResource(key: "Detail.Cell.Star", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 拉取请求
      static let detailCellPull = Rswift.StringResource(key: "Detail.Cell.Pull", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 提交
      static let detailCellCommit = Rswift.StringResource(key: "Detail.Cell.Commit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 搜索
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 无
      static let none = Rswift.StringResource(key: "None", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 是
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 本周
      static let weekly = Rswift.StringResource(key: "Weekly", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 本月
      static let monthly = Rswift.StringResource(key: "Monthly", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 松开刷新
      static let releaseToRefresh = Rswift.StringResource(key: "Release to refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在加载更多
      static let loadingMore = Rswift.StringResource(key: "Loading more", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 没有更多的了
      static let noMoreData = Rswift.StringResource(key: "No more data", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 注册于%@
      static let userJoinMessage = Rswift.StringResource(key: "User.Join.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 活动
      static let activity = Rswift.StringResource(key: "Activity", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 消息
      static let message = Rswift.StringResource(key: "Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 清除缓存
      static let clearCache = Rswift.StringResource(key: "Clear cache", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 源代码
      static let detailCellCode = Rswift.StringResource(key: "Detail.Cell.Code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 点击登录
      static let clickToLogin = Rswift.StringResource(key: "Click to login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 登录
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 知道了
      static let iSee = Rswift.StringResource(key: "I see", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 确认
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 计算行数
      static let detailCellLine = Rswift.StringResource(key: "Detail.Cell.Line", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 设置
      static let setting = Rswift.StringResource(key: "Setting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 贡献值
      static let detailCellContributor = Rswift.StringResource(key: "Detail.Cell.Contributor", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 账户
      static let settingAccount = Rswift.StringResource(key: "Setting.Account", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 趋势
      static let trending = Rswift.StringResource(key: "Trending", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 退出
      static let exit = Rswift.StringResource(key: "Exit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 退出登录
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 颜色主题
      static let settingPreferencesTheme = Rswift.StringResource(key: "Setting.Preferences.Theme", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 首选项
      static let settingPreferences = Rswift.StringResource(key: "Setting.Preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %@增加了%d个星
      static func trendingRepoStarsNew(_ value1: String, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Trending.Repo.Stars.New", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Trending.Repo.Stars.New"
        }

        let format = NSLocalizedString("Trending.Repo.Stars.New", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: Blog
      static func blog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blog"
        }

        return NSLocalizedString("Blog", bundle: bundle, comment: "")
      }

      /// Value: Branches
      static func branches(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Branches", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Branches"
        }

        return NSLocalizedString("Branches", bundle: bundle, comment: "")
      }

      /// Value: Company
      static func company(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Company", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Company"
        }

        return NSLocalizedString("Company", bundle: bundle, comment: "")
      }

      /// Value: Developers
      static func developers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Developers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Developers"
        }

        return NSLocalizedString("Developers", bundle: bundle, comment: "")
      }

      /// Value: Email
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// Value: Followers
      static func followers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Followers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Followers"
        }

        return NSLocalizedString("Followers", bundle: bundle, comment: "")
      }

      /// Value: Following
      static func following(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Following", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Following"
        }

        return NSLocalizedString("Following", bundle: bundle, comment: "")
      }

      /// Value: Forks
      static func forks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forks"
        }

        return NSLocalizedString("Forks", bundle: bundle, comment: "")
      }

      /// Value: Issues
      static func issues(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Issues", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Issues"
        }

        return NSLocalizedString("Issues", bundle: bundle, comment: "")
      }

      /// Value: Location
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location"
        }

        return NSLocalizedString("Location", bundle: bundle, comment: "")
      }

      /// Value: Pull requests
      static func pullRequests(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pull requests", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pull requests"
        }

        return NSLocalizedString("Pull requests", bundle: bundle, comment: "")
      }

      /// Value: Readme
      static func readme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Readme", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Readme"
        }

        return NSLocalizedString("Readme", bundle: bundle, comment: "")
      }

      /// Value: Repositories
      static func repositories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repositories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repositories"
        }

        return NSLocalizedString("Repositories", bundle: bundle, comment: "")
      }

      /// Value: Stars
      static func stars(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stars", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stars"
        }

        return NSLocalizedString("Stars", bundle: bundle, comment: "")
      }

      /// Value: Updated %@ ago
      static func repoUpdateDatetime(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Repo.Update.Datetime", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repo.Update.Datetime"
        }

        let format = NSLocalizedString("Repo.Update.Datetime", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: User
      static func user(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User"
        }

        return NSLocalizedString("User", bundle: bundle, comment: "")
      }

      /// Value: Watchs
      static func watchs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watchs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watchs"
        }

        return NSLocalizedString("Watchs", bundle: bundle, comment: "")
      }

      /// Value: 下拉刷新
      static func pullToRefresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pull to refresh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pull to refresh"
        }

        return NSLocalizedString("Pull to refresh", bundle: bundle, comment: "")
      }

      /// Value: 事件
      static func detailCellEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Event"
        }

        return NSLocalizedString("Detail.Cell.Event", bundle: bundle, comment: "")
      }

      /// Value: 今日
      static func daily(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Daily", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Daily"
        }

        return NSLocalizedString("Daily", bundle: bundle, comment: "")
      }

      /// Value: 保存
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// Value: 加载中
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading..."
        }

        return NSLocalizedString("Loading...", bundle: bundle, comment: "")
      }

      /// Value: 取消
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// Value: 否
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// Value: 夜间模式
      static func settingPreferencesNight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.Preferences.Night", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.Preferences.Night"
        }

        return NSLocalizedString("Setting.Preferences.Night", bundle: bundle, comment: "")
      }

      /// Value: 密码
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// Value: 已发布
      static func detailCellRelease(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Release", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Release"
        }

        return NSLocalizedString("Detail.Cell.Release", bundle: bundle, comment: "")
      }

      /// Value: 您确定要退出%@吗
      static func userExitPrompt(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("User.Exit.Prompt", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.Exit.Prompt"
        }

        let format = NSLocalizedString("User.Exit.Prompt", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: 我的通知
      static func detailCellNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Notification"
        }

        return NSLocalizedString("Detail.Cell.Notification", bundle: bundle, comment: "")
      }

      /// Value: 我的项目
      static func settingProject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.Project", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.Project"
        }

        return NSLocalizedString("Setting.Project", bundle: bundle, comment: "")
      }

      /// Value: 所有分支
      static func detailCellBranch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Branch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Branch"
        }

        return NSLocalizedString("Detail.Cell.Branch", bundle: bundle, comment: "")
      }

      /// Value: 所有语言
      static func allLanguages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("All languages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "All languages"
        }

        return NSLocalizedString("All languages", bundle: bundle, comment: "")
      }

      /// Value: 打星历史
      static func detailCellStar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Star", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Star"
        }

        return NSLocalizedString("Detail.Cell.Star", bundle: bundle, comment: "")
      }

      /// Value: 拉取请求
      static func detailCellPull(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Pull", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Pull"
        }

        return NSLocalizedString("Detail.Cell.Pull", bundle: bundle, comment: "")
      }

      /// Value: 提交
      static func detailCellCommit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Commit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Commit"
        }

        return NSLocalizedString("Detail.Cell.Commit", bundle: bundle, comment: "")
      }

      /// Value: 搜索
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", bundle: bundle, comment: "")
      }

      /// Value: 无
      static func none(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None"
        }

        return NSLocalizedString("None", bundle: bundle, comment: "")
      }

      /// Value: 是
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// Value: 本周
      static func weekly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weekly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weekly"
        }

        return NSLocalizedString("Weekly", bundle: bundle, comment: "")
      }

      /// Value: 本月
      static func monthly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Monthly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Monthly"
        }

        return NSLocalizedString("Monthly", bundle: bundle, comment: "")
      }

      /// Value: 松开刷新
      static func releaseToRefresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Release to refresh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Release to refresh"
        }

        return NSLocalizedString("Release to refresh", bundle: bundle, comment: "")
      }

      /// Value: 正在加载更多
      static func loadingMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading more", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading more"
        }

        return NSLocalizedString("Loading more", bundle: bundle, comment: "")
      }

      /// Value: 没有更多的了
      static func noMoreData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No more data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No more data"
        }

        return NSLocalizedString("No more data", bundle: bundle, comment: "")
      }

      /// Value: 注册于%@
      static func userJoinMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("User.Join.Message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.Join.Message"
        }

        let format = NSLocalizedString("User.Join.Message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: 活动
      static func activity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Activity"
        }

        return NSLocalizedString("Activity", bundle: bundle, comment: "")
      }

      /// Value: 消息
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Message"
        }

        return NSLocalizedString("Message", bundle: bundle, comment: "")
      }

      /// Value: 清除缓存
      static func clearCache(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Clear cache", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Clear cache"
        }

        return NSLocalizedString("Clear cache", bundle: bundle, comment: "")
      }

      /// Value: 源代码
      static func detailCellCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Code"
        }

        return NSLocalizedString("Detail.Cell.Code", bundle: bundle, comment: "")
      }

      /// Value: 点击登录
      static func clickToLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Click to login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Click to login"
        }

        return NSLocalizedString("Click to login", bundle: bundle, comment: "")
      }

      /// Value: 登录
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// Value: 知道了
      static func iSee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I see", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I see"
        }

        return NSLocalizedString("I see", bundle: bundle, comment: "")
      }

      /// Value: 确认
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// Value: 计算行数
      static func detailCellLine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Line", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Line"
        }

        return NSLocalizedString("Detail.Cell.Line", bundle: bundle, comment: "")
      }

      /// Value: 设置
      static func setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting"
        }

        return NSLocalizedString("Setting", bundle: bundle, comment: "")
      }

      /// Value: 贡献值
      static func detailCellContributor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail.Cell.Contributor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Cell.Contributor"
        }

        return NSLocalizedString("Detail.Cell.Contributor", bundle: bundle, comment: "")
      }

      /// Value: 账户
      static func settingAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.Account"
        }

        return NSLocalizedString("Setting.Account", bundle: bundle, comment: "")
      }

      /// Value: 趋势
      static func trending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Trending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Trending"
        }

        return NSLocalizedString("Trending", bundle: bundle, comment: "")
      }

      /// Value: 退出
      static func exit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Exit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Exit"
        }

        return NSLocalizedString("Exit", bundle: bundle, comment: "")
      }

      /// Value: 退出登录
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// Value: 颜色主题
      static func settingPreferencesTheme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.Preferences.Theme", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.Preferences.Theme"
        }

        return NSLocalizedString("Setting.Preferences.Theme", bundle: bundle, comment: "")
      }

      /// Value: 首选项
      static func settingPreferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting.Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting.Preferences"
        }

        return NSLocalizedString("Setting.Preferences", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "AppLaunch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AppLaunch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
